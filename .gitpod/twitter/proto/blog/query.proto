syntax = "proto3";
package cosmonaut.blog.blog;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "blog/params.proto";
import "blog/post.proto";
import "blog/comment.proto";
import "blog/follow.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/cosmonaut/blog/x/blog/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmonaut/blog/blog/params";
  }
  // Queries a list of Posts items.
	rpc Posts(QueryPostsRequest) returns (QueryPostsResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/posts";
	}

// Queries a Comment by id.
	rpc Comment(QueryGetCommentRequest) returns (QueryGetCommentResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/comment/{id}";
	}

	// Queries a list of Comment items.
	rpc CommentAll(QueryAllCommentRequest) returns (QueryAllCommentResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/comment";
	}

// Queries a list of Comments items.
	rpc Comments(QueryCommentsRequest) returns (QueryCommentsResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/comments/{id}";
	}

// Queries a Follow by id.
	rpc Follow(QueryGetFollowRequest) returns (QueryGetFollowResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/follow/{id}";
	}

	// Queries a list of Follow items.
	rpc FollowAll(QueryAllFollowRequest) returns (QueryAllFollowResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/follow";
	}

// Queries a list of FollowingPosts items.
	rpc FollowingPosts(QueryFollowingPostsRequest) returns (QueryFollowingPostsResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/following_posts/{id}";
	}

// Queries a list of FollowedBy items.
	rpc FollowedBy(QueryFollowedByRequest) returns (QueryFollowedByResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/followed_by/{creator}";
	}

// Queries a list of FollowedPosts items.
	rpc FollowedPosts(QueryFollowedPostsRequest) returns (QueryFollowedPostsResponse) {
		option (google.api.http).get = "/cosmonaut/blog/blog/followed_posts/{creator}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryPostsRequest {
  // Adding pagination to request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPostsResponse {
  // Returning a list of posts
  repeated Post Post = 1;
  // Adding pagination to response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCommentRequest {
	uint64 id = 1;
}

message QueryGetCommentResponse {
	Comment Comment = 1 [(gogoproto.nullable) = false];
}

message QueryAllCommentRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCommentResponse {
	repeated Comment Comment = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCommentsRequest {
	uint64 id = 1;
    // Adding pagination to request
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryCommentsResponse {
  Post Post = 1;
  	// Returning a list of comments
  repeated Comment Comment = 2;
    // Adding pagination to response
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}


message QueryGetFollowRequest {
	uint64 id = 1;
}

message QueryGetFollowResponse {
	Follow Follow = 1 [(gogoproto.nullable) = false];
}

message QueryAllFollowRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFollowResponse {
	repeated Follow Follow = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFollowingPostsRequest {
  uint64 id = 1;
  string creator = 2;
}

message PostWithComments {
	Post post = 1;
	repeated Comment comments = 2;
}

message QueryFollowingPostsResponse {
  repeated PostWithComments post_with_comments = 1;
}

message QueryFollowedByRequest {
  string creator = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryFollowedByResponse {
	repeated string following = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFollowedPostsRequest {
  string creator = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryFollowedPostsResponse {
	repeated Post post = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
